{%- macro modelClass(name, properties, required, indentLevel) %}
{%- set required = required | default([]) -%}
{%- set className = name | upperFirst %}
{% set indent1 = indentLevel | indent1 -%}
{% set indent2 = indentLevel | indent2 -%}
{% set indent3 = indentLevel | indent3 -%}
{% set indent4 = indentLevel | indent4 -%}

{{ indent1 }}@dataclass_json(letter_case=LetterCase.CAMEL)
{{ indent1 }}@dataclass
{{ indent1 }}class {{ name | upperFirst }}:
{%- for name, prop in properties -%}
{%- set typeInfo = [name, prop] | getTypeInfo -%}
{%- if typeInfo.recursive %}
{{ modelClass(typeInfo.innerType, typeInfo.properties, prop.required(), indentLevel+1) }}
{%- elif typeInfo.generalType === 'enum' %}
{{ indent2 }}class {{ typeInfo.type }}(str, Enum):
{% for v in typeInfo.enum -%}
{{ indent3 }}{{ v | snakeCase }} = '{{ v | snakeCase }}'
{% endfor -%}
{%- endif -%}
{%- endfor -%}
{%- for name, prop in properties -%}
{%- set typeInfo = [name, prop] | getTypeInfo %}
{{ indent2 }}{{ typeInfo.pythonName | snakeCase }}: {% if not required.includes(typeInfo.pythonName) %}Optional[{% endif -%}
{{ typeInfo.pythonType }}
{%- if not required.includes(typeInfo.pythonName) -%}] = field(default_factory={{ typeInfo.pythonType }}){%- endif %}
{%- else %}
{{ indent2 }}pass
{%- endfor %}
{%- endmacro -%}
